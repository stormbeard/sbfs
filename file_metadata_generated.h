// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILEMETADATA_SBFS_H_
#define FLATBUFFERS_GENERATED_FILEMETADATA_SBFS_H_

#include "flatbuffers/flatbuffers.h"

namespace Sbfs {

struct Inode;

struct Metadata;

enum FileType {
  FileType_File = 0,
  FileType_Directory = 1,
  FileType_Symlink = 2,
  FileType_NamedPipe = 3,
  FileType_Socket = 4,
  FileType_Device = 5,
  FileType_MIN = FileType_File,
  FileType_MAX = FileType_Device
};

inline const char **EnumNamesFileType() {
  static const char *names[] = {
    "File",
    "Directory",
    "Symlink",
    "NamedPipe",
    "Socket",
    "Device",
    nullptr
  };
  return names;
}

inline const char *EnumNameFileType(FileType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFileType()[index];
}

MANUALLY_ALIGNED_STRUCT(8) Inode FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t size_bytes_;
  int64_t user_id_;
  int64_t group_id_;
  int64_t mode_;
  int64_t link_count_;
  int64_t last_access_time_;
  int64_t last_file_modified_time_;
  int64_t last_inode_modified_time_;

 public:
  Inode() {
    memset(this, 0, sizeof(Inode));
  }
  Inode(const Inode &_o) {
    memcpy(this, &_o, sizeof(Inode));
  }
  Inode(int64_t _size_bytes, int64_t _user_id, int64_t _group_id, int64_t _mode, int64_t _link_count, int64_t _last_access_time, int64_t _last_file_modified_time, int64_t _last_inode_modified_time)
      : size_bytes_(flatbuffers::EndianScalar(_size_bytes)),
        user_id_(flatbuffers::EndianScalar(_user_id)),
        group_id_(flatbuffers::EndianScalar(_group_id)),
        mode_(flatbuffers::EndianScalar(_mode)),
        link_count_(flatbuffers::EndianScalar(_link_count)),
        last_access_time_(flatbuffers::EndianScalar(_last_access_time)),
        last_file_modified_time_(flatbuffers::EndianScalar(_last_file_modified_time)),
        last_inode_modified_time_(flatbuffers::EndianScalar(_last_inode_modified_time)) {
  }
  int64_t size_bytes() const {
    return flatbuffers::EndianScalar(size_bytes_);
  }
  int64_t user_id() const {
    return flatbuffers::EndianScalar(user_id_);
  }
  int64_t group_id() const {
    return flatbuffers::EndianScalar(group_id_);
  }
  int64_t mode() const {
    return flatbuffers::EndianScalar(mode_);
  }
  int64_t link_count() const {
    return flatbuffers::EndianScalar(link_count_);
  }
  int64_t last_access_time() const {
    return flatbuffers::EndianScalar(last_access_time_);
  }
  int64_t last_file_modified_time() const {
    return flatbuffers::EndianScalar(last_file_modified_time_);
  }
  int64_t last_inode_modified_time() const {
    return flatbuffers::EndianScalar(last_inode_modified_time_);
  }
};
STRUCT_END(Inode, 64);

struct Metadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INODE = 4,
    VT_TYPE = 6
  };
  const Inode *inode() const {
    return GetStruct<const Inode *>(VT_INODE);
  }
  FileType type() const {
    return static_cast<FileType>(GetField<int16_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Inode>(verifier, VT_INODE) &&
           VerifyField<int16_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_inode(const Inode *inode) {
    fbb_.AddStruct(Metadata::VT_INODE, inode);
  }
  void add_type(FileType type) {
    fbb_.AddElement<int16_t>(Metadata::VT_TYPE, static_cast<int16_t>(type), 0);
  }
  MetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MetadataBuilder &operator=(const MetadataBuilder &);
  flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<Metadata> CreateMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Inode *inode = 0,
    FileType type = FileType_File) {
  MetadataBuilder builder_(_fbb);
  builder_.add_inode(inode);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const Sbfs::Metadata *GetMetadata(const void *buf) {
  return flatbuffers::GetRoot<Sbfs::Metadata>(buf);
}

inline bool VerifyMetadataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sbfs::Metadata>(nullptr);
}

inline void FinishMetadataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sbfs::Metadata> root) {
  fbb.Finish(root);
}

}  // namespace Sbfs

#endif  // FLATBUFFERS_GENERATED_FILEMETADATA_SBFS_H_
